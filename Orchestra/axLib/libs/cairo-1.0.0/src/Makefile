# Makefile.in generated by automake 1.9.5 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




SOURCES = $(libcairo_la_SOURCES)

srcdir = .
top_srcdir = ..

pkgdatadir = $(datadir)/cairo
pkglibdir = $(libdir)/cairo
pkgincludedir = $(includedir)/cairo
top_builddir = ..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-apple-darwin14.1.0
host_triplet = i686-apple-darwin14.1.0
#am__append_1 = cairo-win32-surface.c cairo-win32-private.h
#am__append_2 = cairo-win32-font.c
subdir = src
DIST_COMMON = $(am__cairoinclude_HEADERS_DIST) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in $(srcdir)/cairo-features.h.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES = cairo-features.h
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = `echo $$p | sed -e 's|^.*/||'`;
am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(cairoincludedir)"
libLTLIBRARIES_INSTALL = $(INSTALL)
LTLIBRARIES = $(lib_LTLIBRARIES)
am__DEPENDENCIES_1 =
am__libcairo_la_SOURCES_DIST = cairo.c cairo.h cairo-private.h \
	cairo-arc.c cairo-arc-private.h cairo-array.c cairo-cache.c \
	cairo-clip.c cairo-clip-private.h cairo-color.c cairo-debug.c \
	cairo-debug.h cairo-fixed.c cairo-font.c cairo-font-options.c \
	cairo-gstate.c cairo-gstate-private.h cairo-hash.c \
	cairo-hash-private.h cairo-hull.c cairo-image-surface.c \
	cairo-matrix.c cairo-path.c cairo-path-bounds.c \
	cairo-path-data.c cairo-path-data-private.h cairo-path-fill.c \
	cairo-path-fixed-private.h cairo-path-stroke.c cairo-pen.c \
	cairo-polygon.c cairo-region.c cairo-slope.c cairo-spline.c \
	cairo-surface.c cairo-traps.c cairo-pattern.c cairo-unicode.c \
	cairo-output-stream.c cairo-wideint.c cairo-wideint.h \
	cairo-meta-surface.c cairo-meta-surface-private.h \
	cairo-atsui-font.c cairo-ft-font.c cairo-ft-private.h \
	cairo-ps-surface.c cairo-pdf-surface.c cairo-font-subset.c \
	cairo-font-subset-private.h cairo-png.c cairo-xlib-surface.c \
	cairo-xlib-screen.c cairo-xlib-private.h cairo-xlib-test.h \
	cairo-quartz-surface.c cairo-xcb-surface.c \
	cairo-glitz-surface.c cairo-win32-surface.c \
	cairo-win32-private.h cairo-win32-font.c cairoint.h
#am__objects_1 = cairo-atsui-font.lo
am__objects_2 = cairo-ft-font.lo
#am__objects_3 = cairo-ps-surface.lo
#am__objects_4 = cairo-pdf-surface.lo
#am__objects_5 = cairo-font-subset.lo
#am__objects_5 = cairo-font-subset.lo
#am__objects_6 = cairo-png.lo
am__objects_7 = cairo-xlib-surface.lo \
	cairo-xlib-screen.lo
#am__objects_8 =  \
#	cairo-quartz-surface.lo
#am__objects_9 = cairo-xcb-surface.lo
#am__objects_10 = cairo-glitz-surface.lo
#am__objects_11 = cairo-win32-surface.lo
#am__objects_12 = cairo-win32-font.lo
am__objects_13 = $(am__objects_11) $(am__objects_12)
am_libcairo_la_OBJECTS = cairo.lo cairo-arc.lo cairo-array.lo \
	cairo-cache.lo cairo-clip.lo cairo-color.lo cairo-debug.lo \
	cairo-fixed.lo cairo-font.lo cairo-font-options.lo \
	cairo-gstate.lo cairo-hash.lo cairo-hull.lo \
	cairo-image-surface.lo cairo-matrix.lo cairo-path.lo \
	cairo-path-bounds.lo cairo-path-data.lo cairo-path-fill.lo \
	cairo-path-stroke.lo cairo-pen.lo cairo-polygon.lo \
	cairo-region.lo cairo-slope.lo cairo-spline.lo \
	cairo-surface.lo cairo-traps.lo cairo-pattern.lo \
	cairo-unicode.lo cairo-output-stream.lo cairo-wideint.lo \
	cairo-meta-surface.lo $(am__objects_1) $(am__objects_2) \
	$(am__objects_3) $(am__objects_4) $(am__objects_5) \
	$(am__objects_6) $(am__objects_7) $(am__objects_8) \
	$(am__objects_9) $(am__objects_10) $(am__objects_13)
libcairo_la_OBJECTS = $(am_libcairo_la_OBJECTS)
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(libcairo_la_SOURCES)
DIST_SOURCES = $(am__libcairo_la_SOURCES_DIST)
am__cairoinclude_HEADERS_DIST = cairo.h cairo-features.h cairo-atsui.h \
	cairo-ft.h cairo-glitz.h cairo-pdf.h cairo-ps.h cairo-quartz.h \
	cairo-win32.h cairo-xcb.h cairo-xcb-xrender.h cairo-xlib.h \
	cairo-xlib-xrender.h
cairoincludeHEADERS_INSTALL = $(INSTALL_HEADER)
HEADERS = $(cairoinclude_HEADERS)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /Users/alexarse/Project/axLib/libs/cairo-1.0.0/missing --run aclocal-1.9
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /Users/alexarse/Project/axLib/libs/cairo-1.0.0/missing --run tar
AR = ar
ATSUI_FONT_FEATURE = 
AUTOCONF = ${SHELL} /Users/alexarse/Project/axLib/libs/cairo-1.0.0/missing --run autoconf
AUTOHEADER = ${SHELL} /Users/alexarse/Project/axLib/libs/cairo-1.0.0/missing --run autoheader
AUTOMAKE = ${SHELL} /Users/alexarse/Project/axLib/libs/cairo-1.0.0/missing --run automake-1.9
AWK = awk
CAIRO_CFLAGS =  -I/opt/local/include     -I/opt/local/include -I/opt/local/include/freetype2 -I/opt/local/include -I/opt/local/include/libpng16 -I/opt/local/include -I/opt/local/include/freetype2  -I/opt/local/include/freetype2  -Wall -Wpointer-arith -Wstrict-prototypes 	-Wmissing-prototypes -Wmissing-declarations 	-Wnested-externs -fno-strict-aliasing
CAIRO_HAS_ATSUI_FONT_FALSE = 
CAIRO_HAS_ATSUI_FONT_TRUE = #
CAIRO_HAS_FT_FONT_FALSE = #
CAIRO_HAS_FT_FONT_TRUE = 
CAIRO_HAS_GLITZ_SURFACE_FALSE = 
CAIRO_HAS_GLITZ_SURFACE_TRUE = #
CAIRO_HAS_PDF_SURFACE_FALSE = 
CAIRO_HAS_PDF_SURFACE_TRUE = #
CAIRO_HAS_PNG_FUNCTIONS_FALSE = 
CAIRO_HAS_PNG_FUNCTIONS_TRUE = #
CAIRO_HAS_PS_SURFACE_FALSE = 
CAIRO_HAS_PS_SURFACE_TRUE = #
CAIRO_HAS_QUARTZ_SURFACE_FALSE = 
CAIRO_HAS_QUARTZ_SURFACE_TRUE = #
CAIRO_HAS_WIN32_FONT_FALSE = 
CAIRO_HAS_WIN32_FONT_TRUE = #
CAIRO_HAS_WIN32_SURFACE_FALSE = 
CAIRO_HAS_WIN32_SURFACE_TRUE = #
CAIRO_HAS_XCB_SURFACE_FALSE = 
CAIRO_HAS_XCB_SURFACE_TRUE = #
CAIRO_HAS_XLIB_SURFACE_FALSE = #
CAIRO_HAS_XLIB_SURFACE_TRUE = 
CAIRO_LIBS =  -L/opt/local/lib -lXrender -lX11      -L/opt/local/lib -lfontconfig -lfreetype  -L/opt/local/lib -lfreetype   
CAIRO_VERSION_MAJOR = 1
CAIRO_VERSION_MICRO = 0
CAIRO_VERSION_MINOR = 0
CAIRO_VERSION_OTHER = 
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO = /bin/echo
ECHO_C = \c
ECHO_N = 
ECHO_T = 
EGREP = grep -E
ENABLE_GTK_DOC_FALSE = 
ENABLE_GTK_DOC_TRUE = #
EXEEXT = 
F77 = 
FFLAGS = 
FONTCONFIG_CFLAGS = -I/opt/local/include -I/opt/local/include/freetype2 -I/opt/local/include -I/opt/local/include/libpng16 -I/opt/local/include -I/opt/local/include/freetype2 

# These names match automake style variable definition conventions so
# without these lines, automake will complain during the handling of 
# the libcairo_la_LIBADD below.  (The INCLUDES is an autoconf only
# term and automake does not care about it)
FONTCONFIG_LIBS = -L/opt/local/lib -lfontconfig -lfreetype 
FREETYPE_CFLAGS = -I/opt/local/include/freetype2 
FREETYPE_CONFIG = 
FREETYPE_CONFIG_CFLAGS = 
FREETYPE_CONFIG_LIBS = 
FREETYPE_LIBS = -L/opt/local/lib -lfreetype 
FREETYPE_REQUIRES = freetype2 >= 8.0.2 fontconfig
FT_FONT_FEATURE = #define CAIRO_HAS_FT_FONT 1
GLITZ_CFLAGS = 
GLITZ_LIBS = 
GLITZ_REQUIRES = 
GLITZ_SURFACE_FEATURE = 
GTK_DOC_USE_LIBTOOL_FALSE = #
GTK_DOC_USE_LIBTOOL_TRUE = 
HAVE_PTHREAD_FALSE = #
HAVE_PTHREAD_TRUE = 
HTML_DIR = ${datadir}/gtk-doc/html
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS =  
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LN_S = ln -s
LTLIBOBJS = 
LT_CURRENT_MINUS_AGE = 2
MAINT = #
MAINTAINER_MODE_FALSE = 
MAINTAINER_MODE_TRUE = #
MAKEINFO = ${SHELL} /Users/alexarse/Project/axLib/libs/cairo-1.0.0/missing --run makeinfo
MMX_CFLAGS = -mmmx -msse -Winline --param inline-unit-growth=10000 --param large-function-growth=10000
OBJEXT = o
PACKAGE = cairo
PACKAGE_BUGREPORT = http://bugs.freedesktop.org/enter_bug.cgi?product=cairo
PACKAGE_NAME = cairo
PACKAGE_STRING = cairo 1.0.0
PACKAGE_TARNAME = cairo
PACKAGE_VERSION = 1.0.0
PATH_SEPARATOR = :
PDF_LIBS = 
PDF_SURFACE_FEATURE = 
PKGCONFIG_REQUIRES = Requires.private
PKG_CONFIG = /opt/local/bin/pkg-config
PNG_CFLAGS = 
PNG_FUNCTIONS_FEATURE = 
PNG_LIBS = 
PNG_REQUIRES = 
PS_LIBS = 
PS_SURFACE_FEATURE = 
QUARTZ_SURFACE_FEATURE = 
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
USE_MMX_FALSE = #
USE_MMX_TRUE = 
VERSION = 1.0.0
VERSION_INFO = 4:2:2
WIN32_FONT_FEATURE = 
WIN32_SURFACE_FEATURE = 
XCB_CFLAGS = 
XCB_LIBS = 
XCB_SURFACE_FEATURE = 
XLIB_SURFACE_FEATURE = #define CAIRO_HAS_XLIB_SURFACE 1
XRENDER_CFLAGS = -I/opt/local/include 
XRENDER_LIBS = -L/opt/local/lib -lXrender -lX11 
XRENDER_REQUIRES = xrender
X_CFLAGS = 
X_EXTRA_LIBS = 
X_LIBS = 
X_PRE_LIBS = 
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_F77 = 
ac_ct_RANLIB = ranlib
ac_ct_STRIP = strip
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-apple-darwin14.1.0
build_alias = 
build_cpu = i686
build_os = darwin14.1.0
build_vendor = apple
datadir = ${prefix}/share
exec_prefix = ${prefix}
host = i686-apple-darwin14.1.0
host_alias = 
host_cpu = i686
host_os = darwin14.1.0
host_vendor = apple
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /Users/alexarse/Project/axLib/libs/cairo-1.0.0/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
mkdir_p = $(mkinstalldirs)
oldincludedir = /usr/include
prefix = /usr/local
program_transform_name = s,x,x,
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target_alias = 
#libcairo_ps_headers = cairo-ps.h
#libcairo_ps_sources = cairo-ps-surface.c
#libcairo_font_subset_sources = cairo-font-subset.c cairo-font-subset-private.h
#libcairo_font_subset_sources = cairo-font-subset.c cairo-font-subset-private.h
#libcairo_pdf_headers = cairo-pdf.h
#libcairo_pdf_sources = cairo-pdf-surface.c
#libcairo_png_sources = cairo-png.c
libcairo_xlib_headers = cairo-xlib.h cairo-xlib-xrender.h
libcairo_xlib_sources = cairo-xlib-surface.c cairo-xlib-screen.c cairo-xlib-private.h cairo-xlib-test.h
#libcairo_quartz_headers = cairo-quartz.h
#libcairo_quartz_sources = cairo-quartz-surface.c
#libcairo_xcb_headers = cairo-xcb.h cairo-xcb-xrender.h
#libcairo_xcb_sources = cairo-xcb-surface.c
libcairo_win32_sources = $(am__append_1) $(am__append_2)
#libcairo_win32_headers = cairo-win32.h
#export_symbols = -export-symbols cairo.def
#cairo_def_dependency = cairo.def
#libcairo_glitz_headers = cairo-glitz.h
#libcairo_glitz_sources = cairo-glitz-surface.c
#libcairo_atsui_headers = cairo-atsui.h
#libcairo_atsui_sources = cairo-atsui-font.c
libcairo_ft_headers = cairo-ft.h
libcairo_ft_sources = cairo-ft-font.c cairo-ft-private.h

# Headers that declare the functions in the cairo DLL API on Windows
cairo_win32_api_headers = \
	$(srcdir)/cairo.h \
	$(srcdir)/cairo-ft.h \
	$(srcdir)/cairo-pdf.h \
	$(srcdir)/cairo-ps.h \
	$(srcdir)/cairo-win32.h \
	$(srcdir)/cairo-debug.h

cairoincludedir = $(includedir)/cairo
cairoinclude_HEADERS = \
	cairo.h				\
	cairo-features.h		\
	$(libcairo_atsui_headers)	\
	$(libcairo_ft_headers)		\
	$(libcairo_glitz_headers)	\
	$(libcairo_pdf_headers)		\
	$(libcairo_ps_headers)		\
	$(libcairo_quartz_headers)	\
	$(libcairo_win32_headers)	\
	$(libcairo_xcb_headers)		\
	$(libcairo_xlib_headers)

lib_LTLIBRARIES = libcairo.la
libcairo_la_SOURCES = \
	cairo.c					\
	cairo.h					\
	cairo-private.h				\
	cairo-arc.c				\
	cairo-arc-private.h			\
	cairo-array.c				\
	cairo-cache.c				\
	cairo-clip.c				\
	cairo-clip-private.h			\
	cairo-color.c				\
	cairo-debug.c				\
	cairo-debug.h				\
	cairo-fixed.c				\
	cairo-font.c				\
	cairo-font-options.c			\
	cairo-gstate.c				\
	cairo-gstate-private.h			\
	cairo-hash.c				\
	cairo-hash-private.h			\
	cairo-hull.c				\
	cairo-image-surface.c			\
	cairo-matrix.c				\
	cairo-path.c				\
	cairo-path-bounds.c			\
	cairo-path-data.c			\
	cairo-path-data-private.h		\
	cairo-path-fill.c			\
	cairo-path-fixed-private.h		\
	cairo-path-stroke.c			\
	cairo-pen.c				\
	cairo-polygon.c				\
	cairo-region.c				\
	cairo-slope.c				\
	cairo-spline.c				\
	cairo-surface.c				\
	cairo-traps.c				\
	cairo-pattern.c				\
	cairo-unicode.c				\
	cairo-output-stream.c			\
	cairo-wideint.c				\
	cairo-wideint.h				\
	cairo-meta-surface.c			\
	cairo-meta-surface-private.h		\
	$(libcairo_atsui_sources)		\
	$(libcairo_ft_sources)			\
	$(libcairo_ps_sources)			\
	$(libcairo_pdf_sources)			\
	$(libcairo_font_subset_sources)		\
	$(libcairo_png_sources)			\
	$(libcairo_xlib_sources)		\
	$(libcairo_quartz_sources)		\
	$(libcairo_xcb_sources)			\
	$(libcairo_glitz_sources)		\
	$(libcairo_win32_sources)		\
	cairoint.h

libcairo_la_LDFLAGS = -version-info 4:2:2 -no-undefined $(export_symbols)
INCLUDES = -I$(srcdir) -I$(top_srcdir)/pixman/src $(CAIRO_CFLAGS)
libcairo_la_LIBADD = $(top_builddir)/pixman/src/libpixman.la $(CAIRO_LIBS)
libcairo_la_DEPENDENCIES = $(cairo_def_dependency) $(top_builddir)/pixman/src/libpixman.la
EXTRA_DIST = \
	cairo.def

all: all-am

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  src/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
cairo-features.h: $(top_builddir)/config.status $(srcdir)/cairo-features.h.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(libdir)" || $(mkdir_p) "$(DESTDIR)$(libdir)"
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    f=$(am__strip_dir) \
	    echo " $(LIBTOOL) --mode=install $(libLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) '$$p' '$(DESTDIR)$(libdir)/$$f'"; \
	    $(LIBTOOL) --mode=install $(libLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) "$$p" "$(DESTDIR)$(libdir)/$$f"; \
	  else :; fi; \
	done

uninstall-libLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@set -x; list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  p=$(am__strip_dir) \
	  echo " $(LIBTOOL) --mode=uninstall rm -f '$(DESTDIR)$(libdir)/$$p'"; \
	  $(LIBTOOL) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$p"; \
	done

clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libcairo.la: $(libcairo_la_OBJECTS) $(libcairo_la_DEPENDENCIES) 
	$(LINK) -rpath $(libdir) $(libcairo_la_LDFLAGS) $(libcairo_la_OBJECTS) $(libcairo_la_LIBADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/cairo-arc.Plo
include ./$(DEPDIR)/cairo-array.Plo
include ./$(DEPDIR)/cairo-atsui-font.Plo
include ./$(DEPDIR)/cairo-cache.Plo
include ./$(DEPDIR)/cairo-clip.Plo
include ./$(DEPDIR)/cairo-color.Plo
include ./$(DEPDIR)/cairo-debug.Plo
include ./$(DEPDIR)/cairo-fixed.Plo
include ./$(DEPDIR)/cairo-font-options.Plo
include ./$(DEPDIR)/cairo-font-subset.Plo
include ./$(DEPDIR)/cairo-font.Plo
include ./$(DEPDIR)/cairo-ft-font.Plo
include ./$(DEPDIR)/cairo-glitz-surface.Plo
include ./$(DEPDIR)/cairo-gstate.Plo
include ./$(DEPDIR)/cairo-hash.Plo
include ./$(DEPDIR)/cairo-hull.Plo
include ./$(DEPDIR)/cairo-image-surface.Plo
include ./$(DEPDIR)/cairo-matrix.Plo
include ./$(DEPDIR)/cairo-meta-surface.Plo
include ./$(DEPDIR)/cairo-output-stream.Plo
include ./$(DEPDIR)/cairo-path-bounds.Plo
include ./$(DEPDIR)/cairo-path-data.Plo
include ./$(DEPDIR)/cairo-path-fill.Plo
include ./$(DEPDIR)/cairo-path-stroke.Plo
include ./$(DEPDIR)/cairo-path.Plo
include ./$(DEPDIR)/cairo-pattern.Plo
include ./$(DEPDIR)/cairo-pdf-surface.Plo
include ./$(DEPDIR)/cairo-pen.Plo
include ./$(DEPDIR)/cairo-png.Plo
include ./$(DEPDIR)/cairo-polygon.Plo
include ./$(DEPDIR)/cairo-ps-surface.Plo
include ./$(DEPDIR)/cairo-quartz-surface.Plo
include ./$(DEPDIR)/cairo-region.Plo
include ./$(DEPDIR)/cairo-slope.Plo
include ./$(DEPDIR)/cairo-spline.Plo
include ./$(DEPDIR)/cairo-surface.Plo
include ./$(DEPDIR)/cairo-traps.Plo
include ./$(DEPDIR)/cairo-unicode.Plo
include ./$(DEPDIR)/cairo-wideint.Plo
include ./$(DEPDIR)/cairo-win32-font.Plo
include ./$(DEPDIR)/cairo-win32-surface.Plo
include ./$(DEPDIR)/cairo-xcb-surface.Plo
include ./$(DEPDIR)/cairo-xlib-screen.Plo
include ./$(DEPDIR)/cairo-xlib-surface.Plo
include ./$(DEPDIR)/cairo.Plo

.c.o:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
	if $(LTCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:
install-cairoincludeHEADERS: $(cairoinclude_HEADERS)
	@$(NORMAL_INSTALL)
	test -z "$(cairoincludedir)" || $(mkdir_p) "$(DESTDIR)$(cairoincludedir)"
	@list='$(cairoinclude_HEADERS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(cairoincludeHEADERS_INSTALL) '$$d$$p' '$(DESTDIR)$(cairoincludedir)/$$f'"; \
	  $(cairoincludeHEADERS_INSTALL) "$$d$$p" "$(DESTDIR)$(cairoincludedir)/$$f"; \
	done

uninstall-cairoincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(cairoinclude_HEADERS)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(cairoincludedir)/$$f'"; \
	  rm -f "$(DESTDIR)$(cairoincludedir)/$$f"; \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LTLIBRARIES) $(HEADERS)
installdirs:
	for dir in "$(DESTDIR)$(libdir)" "$(DESTDIR)$(cairoincludedir)"; do \
	  test -z "$$dir" || $(mkdir_p) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libLTLIBRARIES clean-libtool \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-libtool distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am: install-cairoincludeHEADERS install-data-local

install-exec-am: install-libLTLIBRARIES

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-cairoincludeHEADERS uninstall-info-am \
	uninstall-libLTLIBRARIES

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libLTLIBRARIES clean-libtool ctags distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-cairoincludeHEADERS install-data \
	install-data-am install-data-local install-exec \
	install-exec-am install-info install-info-am \
	install-libLTLIBRARIES install-man install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-cairoincludeHEADERS \
	uninstall-info-am uninstall-libLTLIBRARIES


cairo.def: $(cairo_win32_api_headers)
	(echo EXPORTS; \
	cat $(cairo_win32_api_headers) | \
	grep -v -E '^# *include' | \
	gcc \
	    -DCAIRO_HAS_WIN32_SURFACE \
	    -DCAIRO_HAS_WIN32_FONT \
	    -DCAIRO_HAS_PNG_FUNCTIONS \
	    -E - | \
	grep -E '^cairo_.* \(' | \
	sed -e 's/\([^ ]*\).*/\1/' | \
	sort; \
	echo LIBRARY libcairo-$(LT_CURRENT_MINUS_AGE).dll; \
	) >$@

install-data-local:
	@if test -f "$(DESTDIR)$(includedir)/cairo.h" || test -f "$(DESTDIR)$(includedir)/cairo-features.h" ; then \
	  echo "****************************************************************" ;	\
	  echo "*** Error: Old headers found. You should remove the following" ;	\
	  echo "***        files and then type 'make install' again." ;			\
	  ls $(includedir)/cairo*.h ;							\
	  echo "****************************************************************" ;	\
	  false ;									\
        fi
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
